@inject DocumentApp.Defaults.DefaultDocument defDoc
@using DocumentApp.Data
@using DocumentApp.Services
@using Microsoft.AspNetCore.Mvc
@inject FileSystemService fileSysServ
@inject DocumentApp.Services.MongoDBConnection mongoConnection

@if(department == "Газификация")
{
    <table class="table">
        <thead>
            <tr>
                <th>Doc name</th>
                <th>Req</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var doc in docs)
        {
            <tr>
                <td>@doc.Name</td>
                <td><input type="checkbox" @bind-value="doc.isRequired" /></td>
                <td></td>
            </tr>
        }
        </tbody>
    </table>
}
@if(department == "Водоснабжение")
{
    <table class="table">
            <thead>
                <tr>
                    <th>Doc name</th>
                    <th>Req</th>
                    <th>Download</th>
                </tr>
            </thead>
        <tbody>
        @foreach(var doc in docs)
        {
            <tr>
                <td>@doc.Name</td>
                <td><input type="checkbox" @bind-value="doc.isRequired" /></td>
                <td></td>
            </tr>
        }
        </tbody>
    </table>
}
<form class="row g-3" onsubmit="@(() => CloseComp())">
    <div class="col-md-4">
        <input class="form-control" required />
    </div>

    <div class="col-md-4">
    <select class="form-control" @bind="selectedDeveloper" required>
    @foreach (var developer in mongoConnection.FindDevelopers())
    {
        <option value="@developer">@developer.DeveloperOrganisation</option>
    }
    </select>
    </div>

    <div class="col-md-4">
    <select class="form-control" @bind="@selectedCustomer" required>
    @foreach (var projecter in mongoConnection.FindProjecters())
    {
        <option value="@projecter">@projecter.ProjectOrganisation</option>
    }
    </select>
    </div>

<button type="submit">Save project</button>
</form>





@code {
    [Parameter]
    public string? department { get; set; }

    List<Document>? docs;

    Customer selectedCustomer;
    Developer selectedDeveloper;

    protected override void OnInitialized()
    {
        docs = new();
        base.OnInitialized();

        if(department == "Газификация")
        {
            foreach (var doc in defDoc.docsGas)
            {
                docs.Add(new Document
                    {
                        Name = doc,
                        isRequired = false
                    });
            }
        }
        else
        {
            foreach (var doc in defDoc.docsWater)
            {
                docs.Add(new Document
                {
                    Name = doc,
                    isRequired = false
                });
            }
        }
    }
    private void Check(Document doc)
    {

    }

    private async Task LoadFiles(InputFileChangeEventArgs e, Document doc)
    {

        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            Stream stream = file.OpenReadStream(2000000);
            await fileSysServ.UploadDocumentToDb(stream, file.Name);
            stream.Dispose();

            doc.data = GetByteArray(file.Name);
            Download(doc);
        }
    }

    private byte[] GetByteArray(string file)
    {
        return fileSysServ.DownloadDocumentFromDb(file);
    }

    public void Download(Document doc)
    {
    }

    public void CloseComp()
    {
        fileSysServ.currentProject.CustomerId = selectedCustomer.Id;
        fileSysServ.currentProject.DeveloperId = selectedDeveloper.Id;

        mongoConnection.AddToDataBase(fileSysServ.currentProject);
    }
}
