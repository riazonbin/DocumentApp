@inject DocumentApp.Defaults.DefaultDocument defDoc
@using DocumentApp.Data
@using DocumentApp.Services
@using Microsoft.AspNetCore.Mvc
@inject FileSystemService fileSysServ
@inject DocumentApp.Services.MongoDBConnection mongoConnection
@inject DocumentApp.Services.ProjectService projectService
@inject IJSRuntime JS
@inject UserService userService
@inject NavigationManager nManager

@if(department is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Doc name</th>
                <th>Requirement</th>
                <th>Approvement</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var doc in docs)
        {
            <tr>
                <td>@doc.Name</td>
                <td><input type="checkbox" @bind-value="doc.IsRequired" /></td>
                <td><input type="checkbox" @bind-value="doc.IsApproved" /></td>
            </tr>
        }
        </tbody>
    </table>

    <hr />
    <table class="table">
        <thead>
            <tr>
                <th>Doc name</th>
                <th>Requirement</th>
                <th>Approvement</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var doc in projecterDocs)
        {
            <tr>
                <td>@doc.Name</td>
                <td><input type="checkbox" @bind-value="doc.IsRequired" /></td>
                <td><input type="checkbox" @bind-value="doc.IsApproved" /></td>
            </tr>
        }
        </tbody>
    </table>

    <table class="table">
        <thead>
            <tr>
                <th>Name of field</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
         @foreach (var field in testFields)
        {
            if(field.FieldName == "Технико-экономические показатели (ТЭП)" ||
                field.FieldName == "Вводной газопровод низкого давления")
            {
                <tr>
                    <td colspan="2" align="center"><strong>@field.FieldName</strong></td>
                </tr>
            }

            <tr>
                <td>@field.FieldName</td>
                <td><input disabled @bind="field.FieldValue"/></td>
            </tr>
        }
        <tr>
            <td colspan="2"><input type="checkbox" @bind="fileSysServ.currentProject.Form.IsApproved" /> Is approved</td>
        </tr>
        </tbody>
    </table>
    UpdateFields();
}

<form class="row g-3" onsubmit="@(() => CloseComp())">

    <div class="col-md-4">
        <input class="form-control" @bind-value="projectName" required />
    </div>

    <div class="col-md-4">
    <select class="form-control" required @bind="selectedDeveloper">
    <option disabled>Выберите застройщика</option>
    @foreach (var developer in mongoConnection.FindDevelopers())
    {
        <option value="@developer.Login">@developer.DeveloperOrganisation</option>
    }
    </select>
    </div>

    <div class="col-md-4">
    <select class="form-control" required @bind="selectedProjecter">
        <option disabled>Выберите застройщика</option>
    @foreach (var projecter in mongoConnection.FindProjecters())
    {
        <option value="@projecter.Login">@projecter.ProjectOrganisation</option>
    }
    </select>
    </div>

<br />
<button type="submit">Add project</button>
</form>





@code {
    [Parameter]
    public string? department { get; set; }

    List<Document>? docs;
    List<Document>? projecterDocs;
    Form projecterForm;
    List<FormField> testFields;

    string selectedProjecter;
    string selectedDeveloper;
    string projectName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        fileSysServ.currentProject = new Project();
        docs = new();
        projecterDocs = new();
        projecterForm = new();
        testFields = new();

        if(department == "Газификация")
        {
            foreach (var doc in defDoc.docsGas)
            {
                docs.Add(new Document
                    {
                        Name = doc,
                        IsRequired = false,
                        IsApproved = false
                    });
            }
            foreach(var doc in defDoc.projecterDocs)
            {
                projecterDocs.Add(new Document
                {
                    Name = doc,
                    IsRequired = false,
                    IsApproved = false
                });
            }
            foreach(var field in defDoc.projecterFormGas)
            {
                projecterForm.FormFields.Add(new FormField(field, ""));
            }
            foreach(var field in projecterForm.FormFields)
            {
                testFields.Add(field);
            }

        }
        else
        {
            foreach (var doc in defDoc.docsWater)
            {
                docs.Add(new Document
                {
                    Name = doc,
                    IsRequired = false,
                    IsApproved = false
                });
            }

            foreach (var doc in defDoc.projecterDocs)
            {
                projecterDocs.Add(new Document
                    {
                        Name = doc,
                        IsRequired = false,
                        IsApproved = false
                    });
            }

            foreach (var field in defDoc.projecterFormWater)
            {
                projecterForm.FormFields.Add(new FormField(field, ""));
            }

            foreach (var field in projecterForm.FormFields)
            {
                testFields.Add(field);
            }
        }
    }
    private void Check(Document doc)
    {

    }

    private byte[] GetByteArray(string file)
    {
        return fileSysServ.GetByteArrayFromFile(file);
    }


    void UpdateFields()
    {
        testFields = projecterForm.FormFields;
    }

    public void CloseComp()
    {
        if(selectedProjecter is null || selectedDeveloper is null)
        {
            JS.InvokeVoidAsync("alert", "Customer or developer aren't set!");
            return;
        }
        fileSysServ.currentProject.Name = projectName;
        fileSysServ.currentProject.ProjecterId = (mongoConnection.FindProjecterByLogin(selectedProjecter)).Id;
        fileSysServ.currentProject.DeveloperId = (mongoConnection.FindDeveloperByLogin(selectedDeveloper)).Id;
        fileSysServ.currentProject.CustomerId = (mongoConnection.FindCustomerByLogin(userService.currentUser.Login)).Id;
        fileSysServ.currentProject.CreatedDate = DateTime.Now;
        fileSysServ.currentProject.Documents = docs;
        fileSysServ.currentProject.Form = projecterForm;
        fileSysServ.currentProject.ProjectDepartment = (mongoConnection.FindCustomerByLogin(userService.currentUser.Login)).Department;
        fileSysServ.currentProject.ProjecterDocuments = projecterDocs;

        projectService.AddDocsToDataBase(docs);
        projectService.AddProjecterDocsToDataBase(projecterDocs);
        projectService.AddToDataBase(projecterForm);
        projectService.AddToDataBase(fileSysServ.currentProject);

        nManager.NavigateTo("/projectsPage");
    }
}
