@page "/authoPage"
@using DocumentApp.Data
@using DocumentApp.Services
@inject DocumentApp.Services.MongoDBConnection mongoConnection
@inject IJSRuntime JS
@inject DocumentApp.Services.UserService userService
@inject NavigationManager nManager
@inject ILocalStorageService storageService
@inject TimerService timerService
<h3>AuthoPage</h3>


@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <form onsubmit="@TryToFindUser">
        <div class="row g-3">
            <div class="col-md-4">
                <label>Логин:</label> <input placeholder="Логин" class="form-control" @bind-value="@user.Login" required></input>
            </div>

            <div class="col-md-4">
                <label>Пароль:</label> <input placeholder="Пароль" class="form-control" @bind-value="@user.Password" required></input>
            </div>

            <div class="col-12">
                <button class="btn btn-primary mb-3" type="submit">Sign in</button>
            </div>
        </div>
    </form>

    @if (!isCorrectUser)
    {
        <div class="alert alert-danger" role="alert">
            Wrong data!
        </div>
    }
}

<div>
    <p><button @onclick="@(() => timerService.AddMinute())">Add minute</button></p>

    <p>@timerService.timeLeft</p>
    <p>@timerService.displayText</p>
</div>

@code {
    User user = new User();
    bool isLoading = false;
    bool isCorrectUser = true;

    protected override Task OnInitializedAsync()
    {
        timerService.StartTimer();
        return base.OnInitializedAsync();
    }

    private async Task TryToFindUser()
    {
        isLoading = true;

        User foundedUser;

        foundedUser = mongoConnection.FindByLogin(user.Login);

        await Task.Delay(3000);
        if (foundedUser is null)
        {
            await JS.InvokeVoidAsync("alert", "No such user in DB!");
            isLoading = false;
            isCorrectUser = false;
            return;
        }
        else
        {
            if (foundedUser.Password == user.Password)
            {
                userService.currentUser = mongoConnection.FindByLogin(user.Login);
                nManager.NavigateTo("/personalCardPage");
                await storageService.SetAsync<User>("Authorization", userService.currentUser);
                isLoading = false;
                isCorrectUser = true;
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Incorrect password!");
                isLoading = false;
                isCorrectUser = false;
            }
        }

        StateHasChanged();
    }
}
