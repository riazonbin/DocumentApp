@page "/regPage"
@using DocumentApp.Data
@using DocumentApp.Enums
@inject DocumentApp.Services.MongoDBConnection mongoConnection
@inject IJSRuntime JS

<h1>Registration form</h1>
<EditForm class="row g-3" id="regForm" Model="@currentUser" OnValidSubmit="@(() => AddToDb())">
<DataAnnotationsValidator></DataAnnotationsValidator>
<ValidationSummary></ValidationSummary>
    <div class="col-md-4">
        <label>Логин:</label> <input placeholder="Логин" class="form-control" @bind-value="@currentUser.Login"></input>
    </div>

    <div class="col-md-4">
        <label>Пароль:</label> <input placeholder="Пароль" class="form-control" @bind-value="@currentUser.Password"></input>
    </div>

    <div class="col-md-4">
        <label>Повторите пароль:</label> <input placeholder="Повторите пароль" class="form-control" @bind-value="@checkPassword"></input>
    </div>

    <div class="col-md-4">
        <label>Email:</label> <input placeholder="Email" class="form-control" @bind-value="@currentUser.Email"></input>
    </div>

    <div class="col-md-4">
        <label>Телефон:</label> <input placeholder="Телефон" class="form-control" @bind-value="@currentUser.Telephone"></input>
    </div>

    <div class="col-md-4">
        <label>Роль</label> 
        <select id="roleSelector" class="form-control" @bind="@currentUser.Role">
            <option disabled> -- Выберите роль -- </option>
            <option value="@RolesEnum.Customer">Заказчик</option>
            <option value="@RolesEnum.Developer">Застройщик</option>
            <option value="@RolesEnum.Projecter">Проектировщик</option>
        </select>
    </div>

    <br /><br />
    <div class="col-12">
         <button class="btn btn-primary mb-3" type="submit" @onclick="() => StateHasChanged()">Sign Up</button>
    </div>
</EditForm>

@code {
    User currentUser = new User();

    string checkPassword = "";


    private async void AddToDb()
    {
        //if (!IsFulledFields())
        //{
        //    await JS.InvokeVoidAsync("alert", "Not all fields are written!");
        //    return;
        //}

        if (checkPassword != currentUser.Password)
        {
            await JS.InvokeVoidAsync("alert", "Passwords are not the same!");
            return;
        }

        if (mongoConnection.FindByLogin(currentUser.Login) is not null)
        {
            await JS.InvokeVoidAsync("alert", "Such login already exists!");
            return;
        }

        if(currentUser.Role.ToString() == "Customer")
        {
            mongoConnection.AddToDataBase(new Customer(currentUser.Login, currentUser.Password, currentUser.Email, currentUser.Telephone, Enums.RolesEnum.Customer));
        }
        else if (currentUser.Role.ToString() == "Developer")
        {
            mongoConnection.AddToDataBase(new Developer(currentUser.Login, currentUser.Password, currentUser.Email, currentUser.Telephone, Enums.RolesEnum.Developer));
        }
        else if (currentUser.Role.ToString() == "Projecter")
        {
            mongoConnection.AddToDataBase(new Projecter(currentUser.Login, currentUser.Password, currentUser.Email, currentUser.Telephone, Enums.RolesEnum.Projecter));
        }

        ClearFields();
        StateHasChanged();
    }

    private void ClearFields()
    {
        currentUser = new User();
        checkPassword = "";
    }

}